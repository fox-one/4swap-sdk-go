// Code generated by "enumer -type TransactionType -trimprefix TransactionType"; DO NOT EDIT.

package mtg

import (
	"fmt"
)

const (
	_TransactionTypeName_0 = "AddRemoveSwap"
	_TransactionTypeName_1 = "SwapV2"
)

var (
	_TransactionTypeIndex_0 = [...]uint8{0, 3, 9, 13}
	_TransactionTypeIndex_1 = [...]uint8{0, 6}
)

func (i TransactionType) String() string {
	switch {
	case 1 <= i && i <= 3:
		i -= 1
		return _TransactionTypeName_0[_TransactionTypeIndex_0[i]:_TransactionTypeIndex_0[i+1]]
	case i == 6:
		return _TransactionTypeName_1
	default:
		return fmt.Sprintf("TransactionType(%d)", i)
	}
}

var _TransactionTypeValues = []TransactionType{1, 2, 3, 6}

var _TransactionTypeNameToValueMap = map[string]TransactionType{
	_TransactionTypeName_0[0:3]:  1,
	_TransactionTypeName_0[3:9]:  2,
	_TransactionTypeName_0[9:13]: 3,
	_TransactionTypeName_1[0:6]:  6,
}

// TransactionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TransactionTypeString(s string) (TransactionType, error) {
	if val, ok := _TransactionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TransactionType values", s)
}

// TransactionTypeValues returns all values of the enum
func TransactionTypeValues() []TransactionType {
	return _TransactionTypeValues
}

// IsATransactionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TransactionType) IsATransactionType() bool {
	for _, v := range _TransactionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
